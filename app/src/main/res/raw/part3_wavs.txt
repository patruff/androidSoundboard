
    private void creategameoverSampleTempFile() {
        try {
            File file = File.createTempFile("aliens_gameover", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.aliens_gameover);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(aliens_gameover, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void creategetawaySampleTempFile() {
        try {
            File file = File.createTempFile("aliens_getaway", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.aliens_getaway);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(aliens_getaway, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createyalethingSampleTempFile() {
        try {
            File file = File.createTempFile("americanpsycho_yalething", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.americanpsycho_yalething);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(americanpsycho_yalething, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createnonukesSampleTempFile() {
        try {
            File file = File.createTempFile("armageddon_nonukes", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.armageddon_nonukes);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(armageddon_nonukes, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createwhitehouseSampleTempFile() {
        try {
            File file = File.createTempFile("armageddon_whitehouse", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.armageddon_whitehouse);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(armageddon_whitehouse, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createkidsmartySampleTempFile() {
        try {
            File file = File.createTempFile("backtofuture2_kidsmarty", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.backtofuture2_kidsmarty);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(backtofuture2_kidsmarty, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createthinkmcflySampleTempFile() {
        try {
            File file = File.createTempFile("backtofuture_thinkmcfly", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.backtofuture_thinkmcfly);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(backtofuture_thinkmcfly, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createthinkfutureSampleTempFile() {
        try {
            File file = File.createTempFile("batman_thinkfuture", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.batman_thinkfuture);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(batman_thinkfuture, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createpaidduesSampleTempFile() {
        try {
            File file = File.createTempFile("bigtrouble_paiddues", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.bigtrouble_paiddues);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(bigtrouble_paiddues, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createreflexesSampleTempFile() {
        try {
            File file = File.createTempFile("bigtrouble_reflexes", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.bigtrouble_reflexes);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(bigtrouble_reflexes, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createitsatestSampleTempFile() {
        try {
            File file = File.createTempFile("bladerunner_itsatest", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.bladerunner_itsatest);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(bladerunner_itsatest, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createseenthingsSampleTempFile() {
        try {
            File file = File.createTempFile("bladerunner_seenthings", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.bladerunner_seenthings);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(bladerunner_seenthings, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createflipsideSampleTempFile() {
        try {
            File file = File.createTempFile("boondock_flipside", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.boondock_flipside);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(boondock_flipside, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createdeadcostnothingSampleTempFile() {
        try {
            File file = File.createTempFile("braveheart_deadcostnothing", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.braveheart_deadcostnothing);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(braveheart_deadcostnothing, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createurfookedSampleTempFile() {
        try {
            File file = File.createTempFile("braveheart_urfooked", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.braveheart_urfooked);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(braveheart_urfooked, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createcinderellaSampleTempFile() {
        try {
            File file = File.createTempFile("caddyshack_cinderella", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.caddyshack_cinderella);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(caddyshack_cinderella, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createhatsoupSampleTempFile() {
        try {
            File file = File.createTempFile("caddyshack_hatsoup", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.caddyshack_hatsoup);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(caddyshack_hatsoup, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createsteamSampleTempFile() {
        try {
            File file = File.createTempFile("commando_steam", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.commando_steam);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(commando_steam, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createkromlaughsSampleTempFile() {
        try {
            File file = File.createTempFile("conan_kromlaughs", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.conan_kromlaughs);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(conan_kromlaughs, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createlamentSampleTempFile() {
        try {
            File file = File.createTempFile("conan_lament", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.conan_lament);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(conan_lament, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createdbzintroSampleTempFile() {
        try {
            File file = File.createTempFile("dbz_dbzintro", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.dbz_dbzintro);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(dbz_dbzintro, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createnotyetSampleTempFile() {
        try {
            File file = File.createTempFile("diehard2_notyet", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.diehard2_notyet);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(diehard2_notyet, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createtincanSampleTempFile() {
        try {
            File file = File.createTempFile("diehard2_tincan", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.diehard2_tincan);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(diehard2_tincan, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createhardlySampleTempFile() {
        try {
            File file = File.createTempFile("diehard3_hardly", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.diehard3_hardly);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(diehard3_hardly, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createheyzuesSampleTempFile() {
        try {
            File file = File.createTempFile("diehard3_heyzues", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.diehard3_heyzues);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(diehard3_heyzues, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createhansSampleTempFile() {
        try {
            File file = File.createTempFile("diehard_hans", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.diehard_hans);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(diehard_hans, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createhohohoSampleTempFile() {
        try {
            File file = File.createTempFile("diehard_hohoho", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.diehard_hohoho);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(diehard_hohoho, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createoopsSampleTempFile() {
        try {
            File file = File.createTempFile("diehard_oops", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.diehard_oops);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(diehard_oops, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createsuckafuckSampleTempFile() {
        try {
            File file = File.createTempFile("donniedarko_suckafuck", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.donniedarko_suckafuck);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(donniedarko_suckafuck, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createwhocaresSampleTempFile() {
        try {
            File file = File.createTempFile("fifthelement_whocares", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.fifthelement_whocares);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(fifthelement_whocares, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createfalconpunchSampleTempFile() {
        try {
            File file = File.createTempFile("fzero_falconpunch", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.fzero_falconpunch);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(fzero_falconpunch, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createnodickSampleTempFile() {
        try {
            File file = File.createTempFile("ghostbusters_nodick", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.ghostbusters_nodick);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(ghostbusters_nodick, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createhelpusSampleTempFile() {
        try {
            File file = File.createTempFile("glengarry_helpus", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.glengarry_helpus);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(glengarry_helpus, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createleadsSampleTempFile() {
        try {
            File file = File.createTempFile("glengarry_leads", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.glengarry_leads);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(glengarry_leads, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createpricewrongSampleTempFile() {
        try {
            File file = File.createTempFile("happygilmore_pricewrong", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.happygilmore_pricewrong);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(happygilmore_pricewrong, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createwhosbadSampleTempFile() {
        try {
            File file = File.createTempFile("jackson_whosbad", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.jackson_whosbad);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(jackson_whosbad, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createbestaroundSampleTempFile() {
        try {
            File file = File.createTempFile("karatekid_bestaround", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.karatekid_bestaround);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(karatekid_bestaround, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createshutupSampleTempFile() {
        try {
            File file = File.createTempFile("kindergartencop_shutup", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.kindergartencop_shutup);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(kindergartencop_shutup, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createstopitSampleTempFile() {
        try {
            File file = File.createTempFile("kindergartencop_stopit", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.kindergartencop_stopit);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(kindergartencop_stopit, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createtumaSampleTempFile() {
        try {
            File file = File.createTempFile("kindergartencop_tuma", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.kindergartencop_tuma);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(kindergartencop_tuma, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createtobyslaveSampleTempFile() {
        try {
            File file = File.createTempFile("labrynth_tobyslave", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.labrynth_tobyslave);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(labrynth_tobyslave, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createtakemeSampleTempFile() {
        try {
            File file = File.createTempFile("lastofthemohicans_takeme", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.lastofthemohicans_takeme);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(lastofthemohicans_takeme, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createlaughSampleTempFile() {
        try {
            File file = File.createTempFile("legacyofkain_laugh", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.legacyofkain_laugh);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(legacyofkain_laugh, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createvaevictusSampleTempFile() {
        try {
            File file = File.createTempFile("legacyofkain_vaevictus", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.legacyofkain_vaevictus);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(legacyofkain_vaevictus, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void creategetitgirlSampleTempFile() {
        try {
            File file = File.createTempFile("livecrew_getitgirl", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.livecrew_getitgirl);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(livecrew_getitgirl, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createsowhatSampleTempFile() {
        try {
            File file = File.createTempFile("metallica_sowhat", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.metallica_sowhat);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(metallica_sowhat, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void creategiveitupSampleTempFile() {
        try {
            File file = File.createTempFile("microsoft_giveitup", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.microsoft_giveitup);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(microsoft_giveitup, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createwinifyouwantSampleTempFile() {
        try {
            File file = File.createTempFile("moderntalking_winifyouwant", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.moderntalking_winifyouwant);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(moderntalking_winifyouwant, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void creategetmadSampleTempFile() {
        try {
            File file = File.createTempFile("network_getmad", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.network_getmad);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(network_getmad, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createlifevalueSampleTempFile() {
        try {
            File file = File.createTempFile("network_lifevalue", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.network_lifevalue);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(network_lifevalue, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createbastionyeahSampleTempFile() {
        try {
            File file = File.createTempFile("neverendingstory_bastionyeah", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.neverendingstory_bastionyeah);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(neverendingstory_bastionyeah, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void creategottabelieveSampleTempFile() {
        try {
            File file = File.createTempFile("parappa_gottabelieve", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.parappa_gottabelieve);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(parappa_gottabelieve, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createplainzeroSampleTempFile() {
        try {
            File file = File.createTempFile("runningman_plainzero", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.runningman_plainzero);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(runningman_plainzero, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createroomfistSampleTempFile() {
        try {
            File file = File.createTempFile("runningman_roomfist", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.runningman_roomfist);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(runningman_roomfist, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createoutoforderSampleTempFile() {
        try {
            File file = File.createTempFile("scentofwoman_outoforder", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.scentofwoman_outoforder);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(scentofwoman_outoforder, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createlostgeorgeSampleTempFile() {
        try {
            File file = File.createTempFile("snatch_lostgeorge", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.snatch_lostgeorge);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(snatch_lostgeorge, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createcrapmegacrapSampleTempFile() {
        try {
            File file = File.createTempFile("spiderman_crapmegacrap", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.spiderman_crapmegacrap);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(spiderman_crapmegacrap, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createstarfoxdogSampleTempFile() {
        try {
            File file = File.createTempFile("starfox_starfoxdog", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.starfox_starfoxdog);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(starfox_starfoxdog, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createstarfoxdonkeySampleTempFile() {
        try {
            File file = File.createTempFile("starfox_starfoxdonkey", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.starfox_starfoxdonkey);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(starfox_starfoxdonkey, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createstarfoxfalcoSampleTempFile() {
        try {
            File file = File.createTempFile("starfox_starfoxfalco", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.starfox_starfoxfalco);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(starfox_starfoxfalco, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createstarfoxrabbitSampleTempFile() {
        try {
            File file = File.createTempFile("starfox_starfoxrabbit", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.starfox_starfoxrabbit);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(starfox_starfoxrabbit, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createstarfoxslippySampleTempFile() {
        try {
            File file = File.createTempFile("starfox_starfoxslippy", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.starfox_starfoxslippy);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(starfox_starfoxslippy, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createmakeitsoSampleTempFile() {
        try {
            File file = File.createTempFile("startrek_makeitso", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.startrek_makeitso);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(startrek_makeitso, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createlackfaithSampleTempFile() {
        try {
            File file = File.createTempFile("starwars_lackfaith", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.starwars_lackfaith);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(starwars_lackfaith, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createround1SampleTempFile() {
        try {
            File file = File.createTempFile("streetfighter2_round1", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.streetfighter2_round1);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(streetfighter2_round1, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createknockoutSampleTempFile() {
        try {
            File file = File.createTempFile("streetfigther2_knockout", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.streetfigther2_knockout);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(streetfigther2_knockout, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createbootsSampleTempFile() {
        try {
            File file = File.createTempFile("terminator2_boots", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.terminator2_boots);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(terminator2_boots, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createfookerSampleTempFile() {
        try {
            File file = File.createTempFile("terminator_fooker", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.terminator_fooker);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(terminator_fooker, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createidiotstarscreamSampleTempFile() {
        try {
            File file = File.createTempFile("transformers_idiotstarscream", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.transformers_idiotstarscream);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(transformers_idiotstarscream, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createmegatronstoppedSampleTempFile() {
        try {
            File file = File.createTempFile("transformers_megatronstopped", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.transformers_megatronstopped);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(transformers_megatronstopped, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createripoutopticsSampleTempFile() {
        try {
            File file = File.createTempFile("transformers_ripoutoptics", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.transformers_ripoutoptics);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(transformers_ripoutoptics, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createcowbellpantsSampleTempFile() {
        try {
            File file = File.createTempFile("walken_cowbellpants", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.walken_cowbellpants);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(walken_cowbellpants, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createwhycantwebeSampleTempFile() {
        try {
            File file = File.createTempFile("whycant_whycantwebe", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.whycant_whycantwebe);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(whycant_whycantwebe, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createyouloseSampleTempFile() {
        try {
            File file = File.createTempFile("willywonka_youlose", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.willywonka_youlose);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(willywonka_youlose, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createricflairSampleTempFile() {
        try {
            File file = File.createTempFile("wwf_ricflair", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.wwf_ricflair);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(wwf_ricflair, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createnochoiceSampleTempFile() {
        try {
            File file = File.createTempFile("xmen_nochoice", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.xmen_nochoice);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(xmen_nochoice, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }
    private void createlinksoundsSampleTempFile() {
        try {
            File file = File.createTempFile("zelda_linksounds", "mp3", getCacheDir());
            try (FileOutputStream out = new FileOutputStream(file)) {
                InputStream in = getResources().openRawResource(R.raw.zelda_linksounds);
                ByteStreams.copy(in, out);
                out.flush();
                in.close();

                soundboardData.put(zelda_linksounds, file.getPath());
                saveSoundboardData();
            } catch (IOException e) {
                Log.w(TAG, "Unable to write tmp file!", e);
            }
        } catch (IOException e) {
            Log.w(TAG, "Unable to create tmp file!", e);
        }
    }